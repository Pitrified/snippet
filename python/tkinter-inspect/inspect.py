import logging

import tkinter as tk

# some parts of the code inspired by
# python-forum.io/Thread-Tkinter-Getting-Tkinter-Grid-Sizing-Right-the-first-time


def setup_logger(logLevel="DEBUG"):
    """Setup logger that outputs to console for the module
    """
    logroot = logging.getLogger("c")
    logroot.propagate = False
    logroot.setLevel(logLevel)

    module_console_handler = logging.StreamHandler()

    #  log_format_module = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    #  log_format_module = "%(name)s - %(levelname)s: %(message)s"
    log_format_module = "%(name)s: %(message)s"
    #  log_format_module = '%(levelname)s: %(message)s'
    #  log_format_module = "%(message)s"

    formatter = logging.Formatter(log_format_module)
    module_console_handler.setFormatter(formatter)

    logroot.addHandler(module_console_handler)

    logging.addLevelName(5, "TRACE")
    # use it like this
    # logroot.log(5, 'Exceedingly verbose debug')


class Inspector:
    def __init__(self):
        self.root = tk.Tk()
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

        self.aframe = tk.Frame(width=900, height=600, bg="SkyBlue1")
        self.aframe.grid(row=0, column=0, sticky="nsew")

        self.root.bind("<KeyRelease>", self.a_callback)
        self.aframe.bind("<Button-1>", self.a_callback)

        self.root.mainloop()

    def a_callback(self, event):
        generating_widget = event.widget
        logg = logging.getLogger(f"c.{__class__.__name__}.a_callback")
        logg.debug(f"Callback for event{event} generated by {generating_widget}")
        self.inspect_widget(generating_widget)
        self.inspect_event(event)

    def inspect_widget(self, widget):
        """Use widget.keys()
        """
        logg = logging.getLogger(f"c.{__class__.__name__}.inspect_widget")
        for key in widget.keys():
            val = widget[key]
            vtype = str(type(val))
            logg.debug(f"Attribute: {key:.<20} Type: {vtype:.<30} Value: |{val}|")
            # I wanted a single pixel
            # http://tamivox.org/dave/boxchar/index.html

    def inspect_event(self, event):
        """Use vars(event)
        """
        logg = logging.getLogger(f"c.{__class__.__name__}.inspect_event")
        event_vars = vars(event)
        for key in event_vars:
            val = event_vars[key]
            vtype = str(type(val))
            logg.debug(f"Attribute: {key:.<20} Type: {vtype:.<30} Value: |{val}|")


def main():
    setup_logger()
    recap = f"python3 inspect.py"
    logmain = logging.getLogger(f"{__name__}.main")
    logmain.info(recap)

    inspect = Inspector()


if __name__ == "__main__":
    main()
